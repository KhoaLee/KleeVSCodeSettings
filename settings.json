{
  /*==================================================================================
	================================== VIM CONFIGURATION ===============================
	==================================================================================*
  /* From https://github.com/AnthonyAsDev/VSCodeVimSettings?tab=readme-ov-file#-vim-shortcuts */
  // Copy indent from current line when starting a new line
  "vim.autoindent": true,
  // Highlights all text matching current search
  "vim.hlsearch": true,
  // Ignore case in search patterns
  "vim.ignorecase": true,
  // Show the next match while entering a search
  "vim.scroll": 8,
  "vim.incsearch": true,
  "vim.leader": "<space>",
  "vim.sneak": true,
  "vim.showcmd": true,
  "vim.surround": true,
  "vim.easymotion": true,
  "vim.useCtrlKeys": true,
  "vim.useSystemClipboard": true,
  "vim.highlightedyank.enable": true,
  "vim.sneakUseIgnorecaseAndSmartcase": true,
  "vim.cursorStylePerMode.insert": "line",
  "vim.cursorStylePerMode.normal": "block-outline",
  "vim.cursorStylePerMode.replace": "block-outline",
  "vim.cursorStylePerMode.visual": "line",
  "vim.cursorStylePerMode.visualblock": "line",
  "vim.cursorStylePerMode.visualline": "line",
  // Operator Pending Mode Keybindings
  "vim.operatorPendingModeKeyBindings": [
    // Bind L to $ and H to ^ in operator pending mode
    // makes yL and dH work like y$ and d^ respectively:
    {
      "before": ["L"],
      "after": ["$"]
    },
    {
      "before": ["H"],
      "after": ["^"]
    }
  ],
  // Insert Mode Keybindings Non Recursive
  "vim.insertModeKeyBindingsNonRecursive": [
    // Exit Insert Mode
    {
      "before": ["j", "k"],
      "after": ["<Esc>"]
    }
  ],
  // Normal Mode Keybindings Non Recursive
  "vim.normalModeKeyBindingsNonRecursive": [
    // Mimic the behaviour of scrolling up and down with <C-d> and <C-u>
    // The value must be <= with value of "vim.scroll"
    {
      "before": ["<C-j>"],
      "after": ["8", "j"]
    },
    {
      "before": ["<C-k>"],
      "after": ["8", "k"]
    },
    {
      "before": ["<space>", "<space>"],
      "commands": ["vspacecode.space"]
    },
    {
      "before": [","],
      "commands": [
        "vspacecode.space",
        {
          "command": "whichkey.triggerKey",
          "args": "m"
        }
      ]
    },
    ////////////////////////////////////////////////////
    // Keybindings for lines indentation
    ////////////////////////////////////////////////////
    {
      "before": [">"],
      "commands": ["editor.action.indentLines"]
    },
    {
      "before": ["<"],
      "commands": ["editor.action.outdentLines"]
    },
    ////////////////////////////////////////////////////
    // Keybindings for toggling code actions
    ////////////////////////////////////////////////////
    {
      "before": ["<leader>", "c", "a"],
      "commands": ["editor.action.quickFix"]
    },

    ////////////////////////////////////////////////////
    // Keybindings for editor actions with LSP
    ////////////////////////////////////////////////////
    // NOTE: The gd(Go to Definition) keybinding is built-in
    // so no need to re-specify
    {
      "before": ["g", "D"],
      "commands": ["editor.action.goToDeclaration"]
    },
    {
      "before": ["g", "p", "d"],
      "commands": ["editor.action.peekDefinition"]
    },
    {
      "before": ["g", "h"],
      "commands": ["editor.action.showDefinitionPreviewHover"]
    },
    {
      "before": ["g", "i"],
      "commands": ["editor.action.goToImplementation"]
    },
    {
      "before": ["g", "p", "i"],
      "commands": ["editor.action.peekImplementation"]
    },
    {
      "before": ["g", "r"],
      "commands": ["editor.action.referenceSearch.trigger"]
    },
    {
      "before": ["g", "t"],
      "commands": ["editor.action.goToTypeDefinition"]
    },
    {
      "before": ["g", "p", "t"],
      "commands": ["editor.action.peekTypeDefinition"]
    },
    ////////////////////////////////////////////////////
    // Keybindings for toggling sidebar and auxiliary bar
    ////////////////////////////////////////////////////
    {
      "before": ["<leader>", "e"],
      "commands": ["workbench.action.toggleSidebarVisibility"]
    },
    {
      "before": ["<leader>", "E"],
      "commands": ["workbench.action.toggleAuxiliaryBar"]
    },
    ////////////////////////////////////////////////////
    // Keybindings for jumping between methods/attributes
    ////////////////////////////////////////////////////
    {
      // Go to previous method with [m
      "before": ["[", "m"],
      "commands": ["editor.action.previousMethodOrAttributeKeys"]
    },
    {
      // Go to next method with ]m
      "before": ["]", "m"],
      "commands": ["editor.action.nextMethodOrAttributeKeys"]
    },
    ////////////////////////////////////////////////////
    // Keybindings for jumping between diagnostics/errors
    ////////////////////////////////////////////////////
    {
      // Go to next problem/error with ]d
      "before": ["]", "d"],
      "commands": ["editor.action.marker.next"]
    },
    {
      // Go to previous problem/error with [d
      "before": ["[", "d"],
      "commands": ["editor.action.marker.prev"]
    },
    {
      "before": ["<leader>", "d", "s"],
      "commands": ["editor.action.duplicateSelection"]
    },
    {
      "before": ["<leader>", "f", "d"],
      "commands": ["editor.action.formatDocument"]
    },
    {
      "before": ["<leader>", "r", "s"],
      "commands": ["editor.action.rename"]
    },
    {
      "before": ["<leader>", "t", "s"],
      "commands": ["workbench.action.gotoSymbol"]
    },
    {
      "before": ["<leader>", "g", "l"],
      "commands": ["workbench.action.gotoLine"]
    },
    {
      "before": ["<leader>", "i"],
      "commands": ["workbench.action.toggleEditorWidths"]
    },
    {
      "before": ["<leader>", "o"],
      "commands": ["workbench.action.quickOpen"]
    },
    {
      "before": ["<leader>", "p"],
      "commands": ["workbench.action.showCommands"]
    },
    ////////////////////////////////////////////////////
    // Keybindings for interact with notifications panel
    ////////////////////////////////////////////////////
    {
      "before": ["<leader>", "n", "h"],
      "commands": ["notifications.hideList"]
    },
    {
      "before": ["<leader>", "n", "c"],
      "commands": ["notifications.clearAll"]
    },
    {
      "before": ["<leader>", "n", "f"],
      "commands": ["notifications.focusToasts"]
    },
    {
      "before": ["<leader>", "n", "s"],
      "commands": ["notifications.showList"]
    },

    ////////////////////////////////////////////////////
    // Keybindings for adjust view size, height and width
    ////////////////////////////////////////////////////
    {
      "before": ["<leader>", "v", "i"],
      "commands": ["workbench.action.increaseViewSize"]
    },
    {
      "before": ["<leader>", "v", "d"],
      "commands": ["workbench.action.decreaseViewSize"]
    },
    {
      "before": ["<leader>", "v", "i", "h"],
      "commands": ["workbench.action.increaseViewHeight"]
    },
    {
      "before": ["<leader>", "v", "d", "h"],
      "commands": ["workbench.action.decreaseViewHeight"]
    },
    {
      "before": ["<leader>", "v", "i", "w"],
      "commands": ["workbench.action.increaseViewWidth"]
    },
    {
      "before": ["<leader>", "v", "d", "w"],
      "commands": ["workbench.action.decreaseViewWidth"]
    },
    ////////////////////////////////////////////////////
    // Keybindings for action with editor groups
    ////////////////////////////////////////////////////
    {
      "before": ["<leader>", "a", "g", "j"],
      "commands": ["workbench.action.moveActiveEditorGroupDown"]
    },
    {
      "before": ["<leader>", "a", "g", "h"],
      "commands": ["workbench.action.moveActiveEditorGroupLeft"]
    },
    {
      "before": ["<leader>", "a", "g", "l"],
      "commands": ["workbench.action.moveActiveEditorGroupRight"]
    },
    {
      "before": ["<leader>", "a", "g", "k"],
      "commands": ["workbench.action.moveActiveEditorGroupUp"]
    },
    {
      "before": ["<leader>", "a", "e", "f"],
      "commands": ["workbench.action.moveEditorToFirstGroup"]
    },
    {
      "before": ["<leader>", "a", "e", "l"],
      "commands": ["workbench.action.moveEditorToLastGroup"]
    },
    {
      "before": ["<leader>", "a", "e", "n"],
      "commands": ["workbench.action.moveEditorToNextGroup"]
    },
    {
      "before": ["<leader>", "a", "e", "p"],
      "commands": ["workbench.action.moveEditorToPreviousGroup"]
    },
    {
      "before": ["<leader>", "a", "e", "g", "h"],
      "commands": ["workbench.action.moveEditorLeftInGroup"]
    },
    {
      "before": ["<leader>", "a", "e", "g", "l"],
      "commands": ["workbench.action.moveEditorRightInGroup"]
    },
    {
      "before": ["<leader>", "a", "c", "e", "g"],
      "commands": ["workbench.action.closeEditorsAndGroup"]
    },
    {
      "before": ["<leader>", "a", "c", "o", "e"],
      "commands": ["workbench.action.closeOtherEditors"]
    },
    {
      "before": ["<leader>", "a", "c", "e", "o"],
      "commands": ["workbench.action.closeEditorsInOtherGroups"]
    },
    ////////////////////////////////////////////////////
    // keybindings for Git and SCM
    ////////////////////////////////////////////////////
    {
      "before": ["<leader>", "g", "g"],
      "commands": ["workbench.scm.focus"]
    },
    {
      "before": ["<leader>", "g", "t", "l"],
      "commands": ["timeline.focus"]
    },
    {
      "before": ["<leader>", "g", "i", "r"],
      "commands": ["git.init"]
    },
    {
      "before": ["<leader>", "g", "a", "i"],
      "commands": ["git.ignore"]
    },
    {
      "before": ["<leader>", "g", "p", "g"],
      "commands": ["github.publish"]
    },
    {
      "before": ["<leader>", "g", "a", "r"],
      "commands": ["git.addRemote"]
    },
    {
      "before": ["<leader>", "g", "r", "r"],
      "commands": ["git.removeRemote"]
    },
    // Git stage commands
    {
      "before": ["<leader>", "g", "s"],
      "commands": ["git.stage"]
    },
    {
      "before": ["<leader>", "g", "s", "a", "c"],
      "commands": ["git.stageAll"]
    },
    {
      "before": ["<leader>", "g", "s", "a", "m"],
      "commands": ["git.stageAllMerge"]
    },
    {
      "before": ["<leader>", "g", "s", "a", "t"],
      "commands": ["git.stageAllTracked"]
    },
    {
      "before": ["<leader>", "g", "s", "a", "u"],
      "commands": ["git.stageAllUntracked"]
    },
    // Git unstage commands
    {
      "before": ["<leader>", "g", "u"],
      "commands": ["git.unstage"]
    },
    {
      "before": ["<leader>", "g", "u", "a", "c"],
      "commands": ["git.unstageAll"]
    },
    // Git commit commands
    {
      "before": ["<leader>", "g", "c"],
      "commands": ["git.commit"]
    },
    {
      "before": ["<leader>", "g", "c", "a"],
      "commands": ["git.commitAll"]
    },
    {
      "before": ["<leader>", "g", "c", "s"],
      "commands": ["git.commitStaged"]
    },
    {
      "before": ["<leader>", "g", "c", "e"],
      "commands": ["git.commitEmpty"]
    },
    {
      "before": ["<leader>", "g", "u", "c"],
      "commands": ["git.undoCommit"]
    },
    // Git push commands
    {
      "before": ["<leader>", "g", "p", "h"],
      "commands": ["git.push"]
    },
    {
      "before": ["<leader>", "g", "p", "f"],
      "commands": ["git.pushForce"]
    },
    {
      "before": ["<leader>", "g", "p", "b", "t"],
      "commands": ["git.pushTo"]
    },
    {
      "before": ["<leader>", "g", "p", "b", "t", "f"],
      "commands": ["git.pushToForce"]
    },
    // Git pull commands
    {
      "before": ["<leader>", "g", "P", "r"],
      "commands": ["git.pull"]
    },
    {
      "before": ["<leader>", "g", "P", "f"],
      "commands": ["git.pullFrom"]
    },
    {
      "before": ["<leader>", "g", "P", "r"],
      "commands": ["git.pullRebase"]
    },
    // Git rebase command
    {
      "before": ["<leader>", "g", "A", "r"],
      "commands": ["git.rebaseAbort"]
    },
    // Git branch commands
    {
      "before": ["<leader>", "g", "c", "b"],
      "commands": ["git.branch"]
    },
    {
      "before": ["<leader>", "g", "c", "b", "f"],
      "commands": ["git.branchFrom"]
    },
    {
      "before": ["<leader>", "g", "d", "b"],
      "commands": ["git.deleteBranch"]
    },
    {
      "before": ["<leader>", "g", "m", "b"],
      "commands": ["git.merge"]
    },
    {
      "before": ["<leader>", "g", "p", "b"],
      "commands": ["git.publish"]
    },
    {
      "before": ["<leader>", "g", "r", "b"],
      "commands": ["git.renameBranch"]
    },
    {
      "before": ["<leader>", "g", "R", "b"],
      "commands": ["git.rebase"]
    },
    {
      "before": ["<leader>", "g", "C"],
      "commands": ["git.checkout"]
    },
    {
      "before": ["<leader>", "g", "C", "d"],
      "commands": ["git.checkoutDetached"]
    },
    {
      "before": ["<leader>", "g", "c", "p"],
      "commands": ["git.cherryPick"]
    },
    {
      "before": ["<leader>", "g", "d", "c"],
      "commands": ["git.clean"]
    },
    {
      "before": ["<leader>", "g", "d", "a", "c"],
      "commands": ["git.cleanAll"]
    },
    {
      "before": ["<leader>", "g", "d", "a", "t"],
      "commands": ["git.cleanAllTracked"]
    },
    {
      "before": ["<leader>", "g", "d", "a", "u"],
      "commands": ["git.cleanAllUntracked"]
    },
    {
      "before": ["<leader>", "g", "s", "s"],
      "commands": ["git.stash"]
    },
    {
      "before": ["<leader>", "g", "s", "i", "u"],
      "commands": ["git.stashIncludeUntracked"]
    },
    {
      "before": ["<leader>", "g", "a", "s"],
      "commands": ["git.stashApply"]
    },
    {
      "before": ["<leader>", "g", "a", "l", "s"],
      "commands": ["git.stashApplyLatest"]
    },
    {
      "before": ["<leader>", "g", "d", "s"],
      "commands": ["git.stashDrop"]
    },
    {
      "before": ["<leader>", "g", "p", "s"],
      "commands": ["git.stashPop"]
    },
    {
      "before": ["<leader>", "g", "p", "l", "s"],
      "commands": ["git.stashPopLatest"]
    },
    {
      "before": ["<leader>", "g", "c", "t"],
      "commands": ["git.createTag"]
    },
    {
      "before": ["<leader>", "g", "d", "t"],
      "commands": ["git.deleteTag"]
    },
    {
      "before": ["<leader>", "g", "p", "t"],
      "commands": ["git.pushTags"]
    },
    {
      "before": ["<leader>", "g", "f", "f"],
      "commands": ["git.fetch"]
    },
    {
      "before": ["<leader>", "g", "f", "p"],
      "commands": ["git.fetchPrune"]
    },
    {
      "before": ["<leader>", "g", "f", "f", "a", "r"],
      "commands": ["git.fetchAll"]
    },
    {
      "before": ["<leader>", "g", "o", "c"],
      "commands": ["git.openChange"]
    },
    {
      "before": ["<leader>", "g", "o", "f"],
      "commands": ["git.openFile"]
    },
    {
      "before": ["<leader>", "g", "s", "n"],
      "commands": ["editor.action.dirtydiff.next"]
    },
    {
      "before": ["<leader>", "g", "s", "N"],
      "commands": ["editor.action.dirtydiff.previous"]
    },
    {
      "before": ["<leader>", "g", "m", "n"],
      "commands": ["workbench.action.editor.nextChange"]
    },
    {
      "before": ["<leader>", "g", "m", "N"],
      "commands": ["workbench.action.editor.previousChange"]
    },
    {
      "before": ["<leader>", "g", "c", "n"],
      "commands": ["workbench.action.compareEditor.nextChange"]
    },
    {
      "before": ["<leader>", "g", "c", "N"],
      "commands": ["workbench.action.compareEditor.previousChange"]
    },
    {
      "before": ["<leader>", "g", "i", "v"],
      "commands": ["toggle.diff.renderSideBySide"]
    },
    // Git merge conflict commands
    {
      "before": ["<leader>", "m", "c", "b"],
      "commands": ["merge-conflict.accept.both"]
    },
    {
      "before": ["<leader>", "m", "c", "c"],
      "commands": ["merge-conflict.accept.current"]
    },
    {
      "before": ["<leader>", "m", "c", "i"],
      "commands": ["merge-conflict.accept.incoming"]
    },
    {
      "before": ["<leader>", "m", "c", "a", "b"],
      "commands": ["merge-conflict.accept.all-both"]
    },
    {
      "before": ["<leader>", "m", "c", "a", "c"],
      "commands": ["merge-conflict.accept.all-current"]
    },
    {
      "before": ["<leader>", "m", "c", "a", "i"],
      "commands": ["merge-conflict.accept.all-incoming"]
    },
    {
      "before": ["<leader>", "m", "c", "o"],
      "commands": ["merge-conflict.compare"]
    },
    {
      "before": ["<leader>", "m", "c", "n"],
      "commands": ["merge-conflict.next"]
    },
    {
      "before": ["<leader>", "m", "c", "N"],
      "commands": ["merge-conflict.previous"]
    },

    ////////////////////////////////////////////////////
    // Keybindings for debug commands
    ////////////////////////////////////////////////////
    {
      "before": ["<Leader>", "d", "f"],
      "commands": ["workbench.view.debug"]
    },
    {
      "before": ["<Leader>", "d", "c"],
      "commands": ["workbench.action.debug.continue"]
    },
    {
      "before": ["<Leader>", "d", "p"],
      "commands": ["workbench.action.debug.pause"]
    },
    {
      "before": ["<Leader>", "d", "r"],
      "commands": ["workbench.action.debug.restart"]
    },
    {
      "before": ["<Leader>", "d", "h"],
      "commands": ["editor.debug.action.showDebugHover"]
    },
    {
      "before": ["<Leader>", "d", "s"],
      "commands": ["workbench.action.debug.start"]
    },
    {
      "before": ["<Leader>", "d", "i"],
      "commands": ["workbench.action.debug.stepInto"]
    },
    {
      "before": ["<Leader>", "d", "u"],
      "commands": ["workbench.action.debug.stepOut"]
    },
    {
      "before": ["<Leader>", "d", "o"],
      "commands": ["workbench.action.debug.stepOver"]
    },
    {
      "before": ["<Leader>", "d", "b"],
      "commands": ["editor.debug.action.toggleBreakpoint"]
    },
    {
      "before": ["<Leader>", "d", "x"],
      "commands": ["workbench.action.debug.stop"]
    },
    {
      "before": ["<Leader>", "d", "a", "l"],
      "commands": ["editor.debug.action.addLogPoint"]
    },
    {
      "before": ["<Leader>", "d", "a", "f"],
      "commands": ["workbench.debug.viewlet.action.addFunctionBreakpointAction"]
    },
    {
      "before": ["<Leader>", "d", "a", "c"],
      "commands": ["editor.debug.action.conditionalBreakpoint"]
    },
    {
      "before": ["<Leader>", "d", "a", "i"],
      "commands": ["editor.debug.action.toggleInlineBreakpoint"]
    },
    {
      "before": ["<Leader>", "d", "e", "b"],
      "commands": ["workbench.debug.viewlet.action.enableAllBreakpoints"]
    },
    {
      "before": ["<Leader>", "d", "d", "b"],
      "commands": ["workbench.debug.viewlet.action.disableAllBreakpoints"]
    },
    {
      "before": ["<Leader>", "d", "r", "b"],
      "commands": ["workbench.debug.viewlet.action.removeAllBreakpoints"]
    },
    {
      "before": ["<Leader>", "d", "n"],
      "commands": ["editor.debug.action.goToNextBreakpoint"]
    },
    {
      "before": ["<Leader>", "d", "N"],
      "commands": ["editor.debug.action.goToPreviousBreakpoint"]
    },
    ////////////////////////////////////////////////////
    // keybindings for spliting editor
    ////////////////////////////////////////////////////
    {
      "before": ["<leader>", "s", "h"],
      "commands": ["workbench.action.splitEditorLeft"]
    },
    {
      "before": ["<leader>", "s", "j"],
      "commands": ["workbench.action.splitEditorDown"]
    },
    {
      "before": ["<leader>", "s", "k"],
      "commands": ["workbench.action.splitEditorUp"]
    },
    {
      "before": ["<leader>", "s", "l"],
      "commands": ["workbench.action.splitEditorRight"]
    },
    ////////////////////////////////////////////////////
    // Keybindings for moving lines up and down
    ////////////////////////////////////////////////////
    {
      "before": ["ctrl", "shift", "j"],
      "commands": ["editor.action.moveLinesDownAction"]
    },
    {
      "before": ["ctrl", "shift", "k"],
      "commands": ["editor.action.moveLinesUpAction"]
    }
  ],
  "vim.visualModeKeyBindingsNonRecursive": [
    // Mimic the behaviour of scrolling up and down with <C-d> and <C-u>
    // The value must be <= with value of "vim.scroll"
    {
      "before": ["<C-j>"],
      "after": ["8", "j"]
    },
    {
      "before": ["<C-k>"],
      "after": ["8", "k"]
    },
    {
      "before": ["<space>", "<space>"],
      "commands": ["vspacecode.space"]
    },
    {
      "before": [","],
      "commands": [
        "vspacecode.space",
        {
          "command": "whichkey.triggerKey",
          "args": "m"
        }
      ]
    },
    ////////////////////////////////////////////////////
    // Keybindings for lines indentation
    ////////////////////////////////////////////////////
    {
      "before": [">"],
      "commands": ["editor.action.indentLines"]
    },
    {
      "before": ["<"],
      "commands": ["editor.action.outdentLines"]
    },
    ////////////////////////////////////////////////////
    // Keybindings for toggling code actions
    ////////////////////////////////////////////////////
    {
      "before": ["<leader>", "c", "a"],
      "commands": ["editor.action.quickFix"]
    },
    ////////////////////////////////////////////////////
    // Keybindings for toggling sidebar and auxiliary bar
    ////////////////////////////////////////////////////
    {
      "before": ["<leader>", "e"],
      "commands": ["workbench.action.toggleSidebarVisibility"]
    },
    {
      "before": ["<leader>", "E"],
      "commands": ["workbench.action.toggleAuxiliaryBar"]
    },
    {
      "before": ["<leader>", "d", "s"],
      "commands": ["editor.action.duplicateSelection"]
    },
    {
      "before": ["<leader>", "f"],
      "commands": ["editor.action.formatSelection"]
    },
    {
      "before": ["<leader>", "i"],
      "commands": ["workbench.action.toggleEditorWidths"]
    },
    {
      "before": ["<leader>", "o"],
      "commands": ["workbench.action.quickOpen"]
    },
    {
      "before": ["<leader>", "p"],
      "commands": ["workbench.action.showCommands"]
    },

    ////////////////////////////////////////////////////
    // Keybindings for git  commands in Visual mode
    ////////////////////////////////////////////////////
    {
      "before": ["<Leader>", "g", "s"],
      "commands": ["git.stageSelectedRanges"]
    },
    {
      "before": ["<Leader>", "g", "u"],
      "commands": ["git.unstageSelectedRanges"]
    },
    {
      "before": ["<Leader>", "g", "r"],
      "commands": ["git.revertSelectedRanges"]
    },
    {
      "before": ["leader", "m", "c", "a"],
      "commands": ["merge-conflict.accept.selection"]
    },
    ////////////////////////////////////////////////////
    // keybindings for spliting editor
    ////////////////////////////////////////////////////
    {
      "before": ["<leader>", "s", "h"],
      "commands": ["workbench.action.splitEditorLeft"]
    },
    {
      "before": ["<leader>", "s", "j"],
      "commands": ["workbench.action.splitEditorDown"]
    },
    {
      "before": ["<leader>", "s", "k"],
      "commands": ["workbench.action.splitEditorUp"]
    },
    {
      "before": ["<leader>", "s", "l"],
      "commands": ["workbench.action.splitEditorRight"]
    },
    ////////////////////////////////////////////////////
    // Keybindings for moving lines up and down
    ////////////////////////////////////////////////////
    {
      "before": ["ctrl", "shift", "j"],
      "commands": ["editor.action.moveLinesDownAction"]
    },
    {
      "before": ["ctrl", "shift", "k"],
      "commands": ["editor.action.moveLinesUpAction"]
    }
  ],
  "vim.handleKeys": {
    "<C-a>": false,
    // VS Code new marker @ next occurence
    "<C-c>": true,
    // False Ctrl+d to use Ctrl+j for scrolling down
    "<C-d>": false,
    // False Ctrl+u to use Ctrl+k for scrolling up
    "<C-u>": false,
    // Disable Ctrl+f to use VS Code's find instead
    "<C-f>": false
    // Cut
    // "<C-x>": false,
    // Paste
    // "<C-v>": false ,
    // "<C-z>": false,
    // "<C-y>": false
  },
  // TO IMPROVE VIM PERFORMANCE
  "extensions.experimental.affinity": {
    "vscodevim.vim": 1
  },
  /*====================================================================================================
       EXTENSION: ZOOMBAR CONFIGURATION
       Command: Open the Zoombar view (if available) using your extension’s command palette entry
    ====================================================================================================*/
  "zoombar.zoomUnit": 1,
  "zoombar.defaultZoom": 100,
  "zoombar.zoomUnitType": "multiplicative",
  /*
   * WORKBENCH - TREE & SIDEBAR SETTINGS
   */
  "workbench.tree.indent": 16,
  "workbench.tree.renderIndentGuides": "always",
  "workbench.tree.enableStickyScroll": false,
  "workbench.sideBar.location": "left",
  /*
   * WORKBENCH - MOTION & VISUAL EFFECTS
   */
  "workbench.reduceMotion": "on",
  "workbench.fontAliasing": "default",
  "workbench.colorTheme": "Kanagawa Paper",
  "workbench.preferredDarkColorTheme": "Kanagawa Paper",
  "workbench.preferredHighContrastColorTheme": "Kanagawa Paper",
  /*
   * WORKBENCH - ACTIVITY BAR & LAYOUT CONTROL
   */
  "workbench.activityBar.location": "bottom",
  "workbench.layoutControl.enabled": true,
  /*
   * WORKBENCH - EDITOR GROUPS & TAB SETTINGS
   */
  "workbench.editor.enablePreview": false,
  "workbench.editor.closeEmptyGroups": true,
  "workbench.editor.closeOnFileDelete": false,
  "workbench.editor.limit.enabled": true,
  "workbench.editor.limit.perEditorGroup": true,
  "workbench.editor.tabSizing": "fixed",
  "workbench.editor.showTabs": "single",
  "workbench.editor.limit.value": 1,
  "workbench.editor.decorations.badges": true,
  "workbench.editor.decorations.colors": true,
  "workbench.editor.centeredLayoutAutoResize": true,
  "workbench.editor.labelFormat": "long",
  "workbench.editor.openPositioning": "right",
  "workbench.editorAssociations": {
    "*.ipynb": "jupyter-notebook"
  },
  "workbench.panel.showLabels": false,
  /*
   * BUILT-IN: EDITOR - FONT & LAYOUT
   */
  "editor.tabSize": 4,
  "editor.lineHeight": 1.5,
  "editor.letterSpacing": 1.0,
  "editor.fontFamily": "GeistMono Nerd Font Propo, 'GeistMono Nerd Font Propo', GeistMono Nerd Font Propo",
  "editor.fontSize": 12,
  "editor.fontWeight": "normal",
  "editor.fontLigatures": false,
  "editor.largeFileOptimizations": true,
  "editor.minimap.enabled": false,
  /*
   * BUILT-IN: EDITOR - WORD WRAP & SCROLLING
   */
  "editor.wordWrap": "on",
  "diffEditor.wordWrap": "on",
  "editor.wordWrapColumn": 160,
  "editor.smoothScrolling": true,
  "editor.cursorSmoothCaretAnimation": "on",
  /*
   * BUILT-IN: EDITOR - INLAY HINTS & SUGGESTIONS
   */
  "editor.inlayHints.enabled": "off",
  "editor.parameterHints.enabled": false, // disable parameter hints on typing function
  "editor.inlayHints.fontSize": 12,
  "editor.inlayHints.fontFamily": "GeistMono Nerd Font Propo",
  "editor.inlineSuggest.enabled": true,
  "editor.suggestSelection": "first",
  "editor.acceptSuggestionOnEnter": "on",
  "editor.quickSuggestions": {
    "comments": "on",
    "strings": "on",
    "other": "on"
  },
  /*
   * BUILT-IN: EDITOR - RENDERING & VISUALS
   */
  "editor.lineNumbers": "relative",
  "editor.renderLineHighlight": "all",
  "editor.renderWhitespace": "none",
  "editor.glyphMargin": false,
  "editor.copyWithSyntaxHighlighting": false,
  "editor.cursorBlinking": "solid",
  "editor.colorDecorators": false, // disable rendering color decorators
  "editor.codeLens": false, // disable displaying some action button above line of code
  "editor.links": false, // disable rendering underline indicating for links
  "editor.hideCursorInOverviewRuler": true,
  /*
   * BUILT-IN: EDITOR - GUIDES & FOLDING
   */
  "editor.foldingMaximumRegions": 10000,
  "editor.foldingImportsByDefault": true,
  "editor.guides.bracketPairsHorizontal": false,
  "editor.guides.highlightActiveBracketPair": false,
  "editor.bracketPairColorization.enabled": false,
  "editor.bracketPairColorization.independentColorPoolPerBracketType": false,
  /*
   * BUILT-IN: EDITOR - ACTIONS & BEHAVIOR
   */
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.fixAll": "explicit",
    "source.fixAll.eslint": "explicit",
    "source.organizeImports": "explicit"
  },
  "editor.suggestOnTriggerCharacters": false,
  "editor.snippetSuggestions": "inline",
  "editor.tabCompletion": "on",
  "editor.linkedEditing": true,
  "editor.cursorStyle": "block",
  "editor.accessibilitySupport": "off",
  "editor.codeLensFontFamily": "GeistMono Nerd Font Propo",
  /*
   * BUILT-IN: EDITOR - SCROLLBARS & STICKY SCROLL
   */
  "editor.scrollbar.horizontal": "hidden",
  "editor.scrollbar.vertical": "hidden",
  "editor.stickyScroll.enabled": false,
  /*
   * BUILT-IN: TOKEN COLOR CUSTOMIZATIONS
   */
  "editor.tokenColorCustomizations": {
    "[*Light*]": {
      "textMateRules": [
        {
          "scope": "ref.matchtext",
          "settings": {
            "foreground": "#000"
          }
        }
      ]
    },
    "[*Dark*]": {
      "textMateRules": [
        {
          "scope": "ref.matchtext",
          "settings": {
            "foreground": "#fff"
          }
        }
      ]
    },
    "textMateRules": []
  },
  "debug.terminal.clearBeforeReusing": true,
  "debug.showVariableTypes": true,
  "debug.inlineValues": "auto",
  "debug.console.wordWrap": true,
  "debug.console.fontFamily": "GeistMono Nerd Font Propo, 'GeistMono Nerd Font Propo', GeistMono Nerd Font Propo",
  "debug.console.fontSize": 12,
  /*
   * BUILT-IN: TERMINAL - GENERAL CONFIGURATION
   * Command: Open integrated terminal via "Terminal: Focus Integrated Terminal" (Cmd+`)
   */
  "terminal.integrated.fontSize": 12,
  "terminal.integrated.lineHeight": 1.5,
  "terminal.integrated.cursorWidth": 1,
  "terminal.integrated.letterSpacing": 1.4,
  "terminal.integrated.inheritEnv": true,
  "terminal.integrated.scrollback": 1000,
  "terminal.integrated.fontWeight": "normal",
  /*
   * BUILT-IN: TERMINAL - MACOS SPECIFIC CONFIGURATION
   * Command: Open external terminal via "Terminal: Open New External Terminal" (Cmd+Shift+C)
   */
  "terminal.external.osxExec": "ghostty.app",
  "terminal.integrated.detectLocale": "on",
  "terminal.integrated.allowChords": false,
  "terminal.integrated.customGlyphs": true,
  "terminal.integrated.unicodeVersion": "11",
  "terminal.integrated.cursorStyle": "block",
  "terminal.integrated.gpuAcceleration": "on",
  "terminal.integrated.smoothScrolling": true,
  "terminal.integrated.macOptionIsMeta": true,
  "terminal.integrated.defaultProfile.osx": null, // set to null to use fish shell on terminal
  "terminal.integrated.shellIntegration.enabled": true,
  "terminal.integrated.enablePersistentSessions": false,
  "terminal.integrated.tabs.defaultIcon": "terminal",
  "terminal.integrated.shellIntegration.decorationsEnabled": "both",
  "terminal.integrated.persistentSessionReviveProcess": "onExitAndWindowClose",
  "terminal.integrated.fontFamily": "GeistMono Nerd Font Propo, 'GeistMono Nerd Font Propo', GeistMono Nerd Font Propo",
  "terminal.integrated.stickyScroll.enabled": false,
  "terminal.integrated.allowMnemonics": false,
  /*
   * BUILT-IN: TERMINAL - MACOS TERMINAL PROFILES
   */
  "terminal.integrated.profiles.osx": {
    "fish": {
      "path": "/bin/fish",
      "args": [],
      "icon": "terminal-bash"
    },
    "zsh": {
      "path": "/bin/zsh",
      "args": ["-l", "-i"],
      "icon": "terminal-bash"
    }
  },
  /*
   * BUILT-IN: FILES CONFIGURATION
   */
  "files.autoSave": "afterDelay",
  "files.autoSaveDelay": 10000,
  "files.trimTrailingWhitespace": true,
  "files.insertFinalNewline": true,
  "files.associations": {
    "*.sqlbook": "sql",
    "*.ndjson": "jsonl",
    "*.dbclient-js": "javascript",
    "*.js": "javascript",
    ".env*": "dotenv",
    "*.scss": "postcss"
  },
  "files.watcherExclude": {
    ".env-*": true,
    "**/.env/**": true,
    "**/.venv/**": true,
    "**/.git/objects/**": true,
    "**/node_modules/**": true,
    "**/.git/subtree-cache/**": true
  },
  "files.exclude": {
    "*.sublime-*": true,
    "**/.DS_Store": true,
    "**/node_modules": true,
    "**/.git/objects/**": true
  },
  "files.enableTrash": true,
  /*
   * BUILT-IN: FILE EXPLORER CONFIGURATION
   */
  "explorer.confirmDelete": true,
  "explorer.confirmDragAndDrop": true,
  "explorer.compactFolders": false,
  "explorer.decorations.badges": false,
  /*
   * ####################################################################################
   * ################################# EXTENSIONS CONFIGURATION #########################
   * ####################################################################################
   */
  "custom-ui-style.electron": {
    "frame": false,
    "roundedCorners": true,
    "titleBarStyle": "hiddenInset",
    "trafficLightPosition": {
      "x": 8,
      "y": 8
    }
  },
  "custom-ui-style.font.sansSerif": "GeistMono Nerd Font Propo, -apple-system",
  "custom-ui-style.stylesheet": {
    ".quick-input-widget": "top: 36vh !important",
    ".monaco-scrollable-element > .shadow.top": "display: none",
    ".sidebar .title-label": "padding: 0 !important",
    ".sidebar": "border: none !important",
    ".monaco-workbench .monaco-list:not(.element-focused):focus:before": "outline: none !important",
    ".monaco-list-row.focused": "outline: none !important",
    ".monaco-editor .scroll-decoration": "display: none",
    ".title.show-file-icons .label-container .monaco-icon-label.file-icon": "justify-content: start; padding: 0 !important",
    ".title .monaco-icon-label:after": "margin-right: 0"
  },
  /*
   * GIT CONFIGURATION
   */
  "git.decorations.enabled": false,
  "githubPullRequests.pullBranch": "never",
  "githubPullRequests.createOnPublishBranch": "never",
  "git.confirmSync": true,
  "git.autorefresh": false,
  "git.enableSmartCommit": true,
  "git.terminalGitEditor": true,
  "git-graph.dialog.rebase.launchInteractiveRebase": true,
  "git.ignoreRebaseWarning": false,
  /*
   * NOTEBOOK CONFIGURATION
   */
  "notebook.cellToolbarLocation": {
    "default": "right",
    "jupyter-notebook": "right"
  },
  "jupyter.askForKernelRestart": false,
  "notebook.breadcrumbs.showCodeCells": false,
  "notebook.output.fontFamily": "GeistMono Nerd Font Propo, 'GeistMono Nerd Font Propo', GeistMono Nerd Font Propo",
  "aws.samcli.location": "/usr/local/bin/sam",
  "aws.telemetry": false,
  /*
   * SEARCH CONFIGURATION
   */
  "search.exclude": {
    "**/env": true,
    "**/venv": true,
    "**/node_modules": true,
    "**/bower_components": true
  },
  "search.searchOnType": false,
  /*
   * SCM & BREADCRUMBS CONFIGURATION
   */
  "scm.inputFontSize": 12,
  "breadcrumbs.enabled": false,
  "scm.inputFontFamily": "GeistMono Nerd Font Propo, 'GeistMono Nerd Font Propo', GeistMono Nerd Font Propo",
  /*
   * WINDOW CONFIGURATION
   */
  "window.commandCenter": false,
  "window.customTitleBarVisibility": "windowed",
  "window.titleBarStyle": "native",
  "window.density.editorTabHeight": "compact",
  "window.confirmBeforeClose": "always",
  "window.newWindowProfile": "Default",
  /*
   * ACCESSABILITY CONFIGURATION
   */
  "accessibility.dimUnfocused.enabled": false,
  /*
   * REMOTE CONFIGURATION
   */
  "remote.autoForwardPorts": false,
  "database-client.autoSync": true,
  /*
   * MICS: MISCELLANEOUS CONFIGURATION
   */
  "telemetry.telemetryLevel": "off",
  "security.workspace.trust.untrustedFiles": "open",
  "application.shellEnvironmentResolutionTimeout": 120,
  "update.mode": "manual",
  "dotenv.enableAutocloaking": false,
  /*
   * LANGUAGE CONFIGURATION
   */
  /*================================ HTML ================================*/
  "html.suggest.html5": true,
  "html.autoClosingTags": true,
  "html.format.wrapLineLength": 80,
  "html.format.indentInnerHtml": true,
  "html.format.indentHandlebars": true,
  "html.format.wrapAttributes": "force-expand-multiline",
  "[html]": {
    "editor.formatOnSave": true,
    "editor.linkedEditing": true,
    "editor.foldingStrategy": "auto",
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.codeActionsOnSave": {
      "source.fixAll": "explicit",
      "source.fixAll.eslint": "never"
    }
  },
  /*============================= JAVASCRIPT =============================*/
  "javascript.autoClosingTags": true,
  "[javascript][javascriptreact]": {
    "editor.formatOnSave": true,
    "editor.insertSpaces": true,
    "editor.detectIndentation": false,
    "editor.defaultFormatter": "dbaeumer.vscode-eslint",
    "editor.codeActionsOnSave": {
      "source.fixAll": "explicit",
      "source.fixAll.eslint": "explicit"
    },
    "editor.inlayHints.enabled": "off"
  },
  "javascript.format.semicolons": "insert",
  "javascript.suggest.enabled": true,
  "javascript.suggest.completeJSDocs": true,
  "javascript.suggest.jsdoc.generateReturns": true,
  "javascript.inlayHints.variableTypes.enabled": true,
  "javascript.inlayHints.parameterTypes.enabled": true,
  "javascript.inlayHints.parameterNames.enabled": "literals",
  "javascript.inlayHints.functionLikeReturnTypes.enabled": true,
  "javascript.inlayHints.propertyDeclarationTypes.enabled": true,
  "javascript.updateImportsOnFileMove.enabled": "always",
  /*============================= TYPESCRIPT =============================*/
  "[typescript]": {
    "editor.formatOnSave": true,
    "editor.insertSpaces": true,
    "editor.detectIndentation": false,
    "editor.defaultFormatter": "dbaeumer.vscode-eslint",
    "editor.codeActionsOnSave": {
      "source.fixAll": "explicit",
      "source.fixAll.eslint": "explicit"
    },
    "editor.inlayHints.enabled": "off"
  },
  "typescript.suggest.enabled": true,
  "typescript.autoClosingTags": true,
  "typescript.format.semicolons": "insert",
  "typescript.suggest.completeJSDocs": true,
  "typescript.suggest.jsdoc.generateReturns": true,
  "typescript.inlayHints.variableTypes.enabled": true,
  "typescript.inlayHints.parameterTypes.enabled": true,
  "typescript.inlayHints.parameterNames.enabled": "literals",
  "typescript.inlayHints.enumMemberValues.enabled": true,
  "typescript.updateImportsOnFileMove.enabled": "always",
  "typescript.inlayHints.functionLikeReturnTypes.enabled": true,
  "typescript.inlayHints.propertyDeclarationTypes.enabled": true,
  /*================================ JSON ================================*/
  "[json][jsonc]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  /*============================ CSS SCSS LESS ===========================*/
  "[css][scss][less]": {
    "editor.formatOnSave": true,
    "editor.foldingStrategy": "auto",
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.codeActionsOnSave": {
      "source.fixAll": "explicit",
      "source.fixAll.stylelint": "explicit"
    }
  },
  "css.enabledLanguages": ["html", "typescript"], // From HTML CSS Support extension
  "css.completion.completePropertyWithSemicolon": true,
  "scss.completion.completePropertyWithSemicolon": true,
  "less.completion.completePropertyWithSemicolon": true,
  "[dockerfile]": {
    "editor.defaultFormatter": "ms-azuretools.vscode-docker"
  },
  /*================================= ESLINT =============================*/
  "eslint.format.enable": true,
  "eslint.lintTask.enable": true,
  "eslint.run": "onSave",
  /*================================ STYLELINT ===========================*/
  // Disable VSCode's built-int linter (optional) from documentation of Stylelint plugin
  "css.validate": false,
  "less.validate": false,
  "scss.validate": false,
  "stylelint.enable": true,
  //Sets the Stylelint config option. Note that when this option is enabled, Stylelint doesn't load configuration files -> Set to null
  "stylelint.config": null,
  "stylelint.configFile": ".stylelintrc.json",
  "stylelint.validate": ["css", "scss", "postcss"],

  "[prisma]": {
    "editor.defaultFormatter": "Prisma.prisma"
  },
  "symbols.hidesExplorerArrows": false,
  "settingsSync.ignoredExtensions": ["ms-vscode-remote.remote-wsl"]
}
